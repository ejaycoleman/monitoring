// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  execution: (where?: ExecutionWhereInput) => Promise<boolean>;
  task: (where?: TaskWhereInput) => Promise<boolean>;
  taskNotification: (where?: TaskNotificationWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  execution: (where: ExecutionWhereUniqueInput) => ExecutionNullablePromise;
  executions: (args?: {
    where?: ExecutionWhereInput;
    orderBy?: ExecutionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Execution>;
  executionsConnection: (args?: {
    where?: ExecutionWhereInput;
    orderBy?: ExecutionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ExecutionConnectionPromise;
  task: (where: TaskWhereUniqueInput) => TaskNullablePromise;
  tasks: (args?: {
    where?: TaskWhereInput;
    orderBy?: TaskOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Task>;
  tasksConnection: (args?: {
    where?: TaskWhereInput;
    orderBy?: TaskOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => TaskConnectionPromise;
  taskNotification: (
    where: TaskNotificationWhereUniqueInput
  ) => TaskNotificationNullablePromise;
  taskNotifications: (args?: {
    where?: TaskNotificationWhereInput;
    orderBy?: TaskNotificationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<TaskNotification>;
  taskNotificationsConnection: (args?: {
    where?: TaskNotificationWhereInput;
    orderBy?: TaskNotificationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => TaskNotificationConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createExecution: (data: ExecutionCreateInput) => ExecutionPromise;
  updateExecution: (args: {
    data: ExecutionUpdateInput;
    where: ExecutionWhereUniqueInput;
  }) => ExecutionPromise;
  updateManyExecutions: (args: {
    data: ExecutionUpdateManyMutationInput;
    where?: ExecutionWhereInput;
  }) => BatchPayloadPromise;
  upsertExecution: (args: {
    where: ExecutionWhereUniqueInput;
    create: ExecutionCreateInput;
    update: ExecutionUpdateInput;
  }) => ExecutionPromise;
  deleteExecution: (where: ExecutionWhereUniqueInput) => ExecutionPromise;
  deleteManyExecutions: (where?: ExecutionWhereInput) => BatchPayloadPromise;
  createTask: (data: TaskCreateInput) => TaskPromise;
  updateTask: (args: {
    data: TaskUpdateInput;
    where: TaskWhereUniqueInput;
  }) => TaskPromise;
  updateManyTasks: (args: {
    data: TaskUpdateManyMutationInput;
    where?: TaskWhereInput;
  }) => BatchPayloadPromise;
  upsertTask: (args: {
    where: TaskWhereUniqueInput;
    create: TaskCreateInput;
    update: TaskUpdateInput;
  }) => TaskPromise;
  deleteTask: (where: TaskWhereUniqueInput) => TaskPromise;
  deleteManyTasks: (where?: TaskWhereInput) => BatchPayloadPromise;
  createTaskNotification: (
    data: TaskNotificationCreateInput
  ) => TaskNotificationPromise;
  updateTaskNotification: (args: {
    data: TaskNotificationUpdateInput;
    where: TaskNotificationWhereUniqueInput;
  }) => TaskNotificationPromise;
  upsertTaskNotification: (args: {
    where: TaskNotificationWhereUniqueInput;
    create: TaskNotificationCreateInput;
    update: TaskNotificationUpdateInput;
  }) => TaskNotificationPromise;
  deleteTaskNotification: (
    where: TaskNotificationWhereUniqueInput
  ) => TaskNotificationPromise;
  deleteManyTaskNotifications: (
    where?: TaskNotificationWhereInput
  ) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  execution: (
    where?: ExecutionSubscriptionWhereInput
  ) => ExecutionSubscriptionPayloadSubscription;
  task: (
    where?: TaskSubscriptionWhereInput
  ) => TaskSubscriptionPayloadSubscription;
  taskNotification: (
    where?: TaskNotificationSubscriptionWhereInput
  ) => TaskNotificationSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type TaskOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "approved_ASC"
  | "approved_DESC"
  | "number_ASC"
  | "number_DESC"
  | "command_ASC"
  | "command_DESC"
  | "frequency_ASC"
  | "frequency_DESC"
  | "period_ASC"
  | "period_DESC";

export type TaskNotificationOrderByInput = "id_ASC" | "id_DESC";

export type ExecutionOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "datetime_ASC"
  | "datetime_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "isAdmin_ASC"
  | "isAdmin_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type ExecutionWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface TaskWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  author?: Maybe<UserWhereInput>;
  approved?: Maybe<Boolean>;
  approved_not?: Maybe<Boolean>;
  number?: Maybe<Int>;
  number_not?: Maybe<Int>;
  number_in?: Maybe<Int[] | Int>;
  number_not_in?: Maybe<Int[] | Int>;
  number_lt?: Maybe<Int>;
  number_lte?: Maybe<Int>;
  number_gt?: Maybe<Int>;
  number_gte?: Maybe<Int>;
  command?: Maybe<String>;
  command_not?: Maybe<String>;
  command_in?: Maybe<String[] | String>;
  command_not_in?: Maybe<String[] | String>;
  command_lt?: Maybe<String>;
  command_lte?: Maybe<String>;
  command_gt?: Maybe<String>;
  command_gte?: Maybe<String>;
  command_contains?: Maybe<String>;
  command_not_contains?: Maybe<String>;
  command_starts_with?: Maybe<String>;
  command_not_starts_with?: Maybe<String>;
  command_ends_with?: Maybe<String>;
  command_not_ends_with?: Maybe<String>;
  frequency?: Maybe<Int>;
  frequency_not?: Maybe<Int>;
  frequency_in?: Maybe<Int[] | Int>;
  frequency_not_in?: Maybe<Int[] | Int>;
  frequency_lt?: Maybe<Int>;
  frequency_lte?: Maybe<Int>;
  frequency_gt?: Maybe<Int>;
  frequency_gte?: Maybe<Int>;
  period?: Maybe<String>;
  period_not?: Maybe<String>;
  period_in?: Maybe<String[] | String>;
  period_not_in?: Maybe<String[] | String>;
  period_lt?: Maybe<String>;
  period_lte?: Maybe<String>;
  period_gt?: Maybe<String>;
  period_gte?: Maybe<String>;
  period_contains?: Maybe<String>;
  period_not_contains?: Maybe<String>;
  period_starts_with?: Maybe<String>;
  period_not_starts_with?: Maybe<String>;
  period_ends_with?: Maybe<String>;
  period_not_ends_with?: Maybe<String>;
  executions_every?: Maybe<ExecutionWhereInput>;
  executions_some?: Maybe<ExecutionWhereInput>;
  executions_none?: Maybe<ExecutionWhereInput>;
  notifications_every?: Maybe<TaskNotificationWhereInput>;
  notifications_some?: Maybe<TaskNotificationWhereInput>;
  notifications_none?: Maybe<TaskNotificationWhereInput>;
  AND?: Maybe<TaskWhereInput[] | TaskWhereInput>;
  OR?: Maybe<TaskWhereInput[] | TaskWhereInput>;
  NOT?: Maybe<TaskWhereInput[] | TaskWhereInput>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  isAdmin?: Maybe<Boolean>;
  isAdmin_not?: Maybe<Boolean>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  tasks_every?: Maybe<TaskWhereInput>;
  tasks_some?: Maybe<TaskWhereInput>;
  tasks_none?: Maybe<TaskWhereInput>;
  notifications_every?: Maybe<TaskNotificationWhereInput>;
  notifications_some?: Maybe<TaskNotificationWhereInput>;
  notifications_none?: Maybe<TaskNotificationWhereInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface TaskNotificationWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  user?: Maybe<UserWhereInput>;
  task?: Maybe<TaskWhereInput>;
  AND?: Maybe<TaskNotificationWhereInput[] | TaskNotificationWhereInput>;
  OR?: Maybe<TaskNotificationWhereInput[] | TaskNotificationWhereInput>;
  NOT?: Maybe<TaskNotificationWhereInput[] | TaskNotificationWhereInput>;
}

export interface ExecutionWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  task?: Maybe<TaskWhereInput>;
  datetime?: Maybe<Int>;
  datetime_not?: Maybe<Int>;
  datetime_in?: Maybe<Int[] | Int>;
  datetime_not_in?: Maybe<Int[] | Int>;
  datetime_lt?: Maybe<Int>;
  datetime_lte?: Maybe<Int>;
  datetime_gt?: Maybe<Int>;
  datetime_gte?: Maybe<Int>;
  AND?: Maybe<ExecutionWhereInput[] | ExecutionWhereInput>;
  OR?: Maybe<ExecutionWhereInput[] | ExecutionWhereInput>;
  NOT?: Maybe<ExecutionWhereInput[] | ExecutionWhereInput>;
}

export type TaskWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  number?: Maybe<Int>;
}>;

export type TaskNotificationWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
}>;

export interface ExecutionCreateInput {
  id?: Maybe<ID_Input>;
  task?: Maybe<TaskCreateOneWithoutExecutionsInput>;
  datetime: Int;
}

export interface TaskCreateOneWithoutExecutionsInput {
  create?: Maybe<TaskCreateWithoutExecutionsInput>;
  connect?: Maybe<TaskWhereUniqueInput>;
}

export interface TaskCreateWithoutExecutionsInput {
  id?: Maybe<ID_Input>;
  author?: Maybe<UserCreateOneWithoutTasksInput>;
  approved?: Maybe<Boolean>;
  number: Int;
  command: String;
  frequency: Int;
  period: String;
  notifications?: Maybe<TaskNotificationCreateManyWithoutTaskInput>;
}

export interface UserCreateOneWithoutTasksInput {
  create?: Maybe<UserCreateWithoutTasksInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutTasksInput {
  id?: Maybe<ID_Input>;
  isAdmin?: Maybe<Boolean>;
  email: String;
  password: String;
  notifications?: Maybe<TaskNotificationCreateManyWithoutUserInput>;
}

export interface TaskNotificationCreateManyWithoutUserInput {
  create?: Maybe<
    | TaskNotificationCreateWithoutUserInput[]
    | TaskNotificationCreateWithoutUserInput
  >;
  connect?: Maybe<
    TaskNotificationWhereUniqueInput[] | TaskNotificationWhereUniqueInput
  >;
}

export interface TaskNotificationCreateWithoutUserInput {
  id?: Maybe<ID_Input>;
  task?: Maybe<TaskCreateOneWithoutNotificationsInput>;
}

export interface TaskCreateOneWithoutNotificationsInput {
  create?: Maybe<TaskCreateWithoutNotificationsInput>;
  connect?: Maybe<TaskWhereUniqueInput>;
}

export interface TaskCreateWithoutNotificationsInput {
  id?: Maybe<ID_Input>;
  author?: Maybe<UserCreateOneWithoutTasksInput>;
  approved?: Maybe<Boolean>;
  number: Int;
  command: String;
  frequency: Int;
  period: String;
  executions?: Maybe<ExecutionCreateManyWithoutTaskInput>;
}

export interface ExecutionCreateManyWithoutTaskInput {
  create?: Maybe<
    ExecutionCreateWithoutTaskInput[] | ExecutionCreateWithoutTaskInput
  >;
  connect?: Maybe<ExecutionWhereUniqueInput[] | ExecutionWhereUniqueInput>;
}

export interface ExecutionCreateWithoutTaskInput {
  id?: Maybe<ID_Input>;
  datetime: Int;
}

export interface TaskNotificationCreateManyWithoutTaskInput {
  create?: Maybe<
    | TaskNotificationCreateWithoutTaskInput[]
    | TaskNotificationCreateWithoutTaskInput
  >;
  connect?: Maybe<
    TaskNotificationWhereUniqueInput[] | TaskNotificationWhereUniqueInput
  >;
}

export interface TaskNotificationCreateWithoutTaskInput {
  id?: Maybe<ID_Input>;
  user?: Maybe<UserCreateOneWithoutNotificationsInput>;
}

export interface UserCreateOneWithoutNotificationsInput {
  create?: Maybe<UserCreateWithoutNotificationsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutNotificationsInput {
  id?: Maybe<ID_Input>;
  isAdmin?: Maybe<Boolean>;
  email: String;
  password: String;
  tasks?: Maybe<TaskCreateManyWithoutAuthorInput>;
}

export interface TaskCreateManyWithoutAuthorInput {
  create?: Maybe<TaskCreateWithoutAuthorInput[] | TaskCreateWithoutAuthorInput>;
  connect?: Maybe<TaskWhereUniqueInput[] | TaskWhereUniqueInput>;
}

export interface TaskCreateWithoutAuthorInput {
  id?: Maybe<ID_Input>;
  approved?: Maybe<Boolean>;
  number: Int;
  command: String;
  frequency: Int;
  period: String;
  executions?: Maybe<ExecutionCreateManyWithoutTaskInput>;
  notifications?: Maybe<TaskNotificationCreateManyWithoutTaskInput>;
}

export interface ExecutionUpdateInput {
  task?: Maybe<TaskUpdateOneWithoutExecutionsInput>;
  datetime?: Maybe<Int>;
}

export interface TaskUpdateOneWithoutExecutionsInput {
  create?: Maybe<TaskCreateWithoutExecutionsInput>;
  update?: Maybe<TaskUpdateWithoutExecutionsDataInput>;
  upsert?: Maybe<TaskUpsertWithoutExecutionsInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<TaskWhereUniqueInput>;
}

export interface TaskUpdateWithoutExecutionsDataInput {
  author?: Maybe<UserUpdateOneWithoutTasksInput>;
  approved?: Maybe<Boolean>;
  number?: Maybe<Int>;
  command?: Maybe<String>;
  frequency?: Maybe<Int>;
  period?: Maybe<String>;
  notifications?: Maybe<TaskNotificationUpdateManyWithoutTaskInput>;
}

export interface UserUpdateOneWithoutTasksInput {
  create?: Maybe<UserCreateWithoutTasksInput>;
  update?: Maybe<UserUpdateWithoutTasksDataInput>;
  upsert?: Maybe<UserUpsertWithoutTasksInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutTasksDataInput {
  isAdmin?: Maybe<Boolean>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  notifications?: Maybe<TaskNotificationUpdateManyWithoutUserInput>;
}

export interface TaskNotificationUpdateManyWithoutUserInput {
  create?: Maybe<
    | TaskNotificationCreateWithoutUserInput[]
    | TaskNotificationCreateWithoutUserInput
  >;
  delete?: Maybe<
    TaskNotificationWhereUniqueInput[] | TaskNotificationWhereUniqueInput
  >;
  connect?: Maybe<
    TaskNotificationWhereUniqueInput[] | TaskNotificationWhereUniqueInput
  >;
  set?: Maybe<
    TaskNotificationWhereUniqueInput[] | TaskNotificationWhereUniqueInput
  >;
  disconnect?: Maybe<
    TaskNotificationWhereUniqueInput[] | TaskNotificationWhereUniqueInput
  >;
  update?: Maybe<
    | TaskNotificationUpdateWithWhereUniqueWithoutUserInput[]
    | TaskNotificationUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | TaskNotificationUpsertWithWhereUniqueWithoutUserInput[]
    | TaskNotificationUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<
    TaskNotificationScalarWhereInput[] | TaskNotificationScalarWhereInput
  >;
}

export interface TaskNotificationUpdateWithWhereUniqueWithoutUserInput {
  where: TaskNotificationWhereUniqueInput;
  data: TaskNotificationUpdateWithoutUserDataInput;
}

export interface TaskNotificationUpdateWithoutUserDataInput {
  task?: Maybe<TaskUpdateOneWithoutNotificationsInput>;
}

export interface TaskUpdateOneWithoutNotificationsInput {
  create?: Maybe<TaskCreateWithoutNotificationsInput>;
  update?: Maybe<TaskUpdateWithoutNotificationsDataInput>;
  upsert?: Maybe<TaskUpsertWithoutNotificationsInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<TaskWhereUniqueInput>;
}

export interface TaskUpdateWithoutNotificationsDataInput {
  author?: Maybe<UserUpdateOneWithoutTasksInput>;
  approved?: Maybe<Boolean>;
  number?: Maybe<Int>;
  command?: Maybe<String>;
  frequency?: Maybe<Int>;
  period?: Maybe<String>;
  executions?: Maybe<ExecutionUpdateManyWithoutTaskInput>;
}

export interface ExecutionUpdateManyWithoutTaskInput {
  create?: Maybe<
    ExecutionCreateWithoutTaskInput[] | ExecutionCreateWithoutTaskInput
  >;
  delete?: Maybe<ExecutionWhereUniqueInput[] | ExecutionWhereUniqueInput>;
  connect?: Maybe<ExecutionWhereUniqueInput[] | ExecutionWhereUniqueInput>;
  set?: Maybe<ExecutionWhereUniqueInput[] | ExecutionWhereUniqueInput>;
  disconnect?: Maybe<ExecutionWhereUniqueInput[] | ExecutionWhereUniqueInput>;
  update?: Maybe<
    | ExecutionUpdateWithWhereUniqueWithoutTaskInput[]
    | ExecutionUpdateWithWhereUniqueWithoutTaskInput
  >;
  upsert?: Maybe<
    | ExecutionUpsertWithWhereUniqueWithoutTaskInput[]
    | ExecutionUpsertWithWhereUniqueWithoutTaskInput
  >;
  deleteMany?: Maybe<ExecutionScalarWhereInput[] | ExecutionScalarWhereInput>;
  updateMany?: Maybe<
    | ExecutionUpdateManyWithWhereNestedInput[]
    | ExecutionUpdateManyWithWhereNestedInput
  >;
}

export interface ExecutionUpdateWithWhereUniqueWithoutTaskInput {
  where: ExecutionWhereUniqueInput;
  data: ExecutionUpdateWithoutTaskDataInput;
}

export interface ExecutionUpdateWithoutTaskDataInput {
  datetime?: Maybe<Int>;
}

export interface ExecutionUpsertWithWhereUniqueWithoutTaskInput {
  where: ExecutionWhereUniqueInput;
  update: ExecutionUpdateWithoutTaskDataInput;
  create: ExecutionCreateWithoutTaskInput;
}

export interface ExecutionScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  datetime?: Maybe<Int>;
  datetime_not?: Maybe<Int>;
  datetime_in?: Maybe<Int[] | Int>;
  datetime_not_in?: Maybe<Int[] | Int>;
  datetime_lt?: Maybe<Int>;
  datetime_lte?: Maybe<Int>;
  datetime_gt?: Maybe<Int>;
  datetime_gte?: Maybe<Int>;
  AND?: Maybe<ExecutionScalarWhereInput[] | ExecutionScalarWhereInput>;
  OR?: Maybe<ExecutionScalarWhereInput[] | ExecutionScalarWhereInput>;
  NOT?: Maybe<ExecutionScalarWhereInput[] | ExecutionScalarWhereInput>;
}

export interface ExecutionUpdateManyWithWhereNestedInput {
  where: ExecutionScalarWhereInput;
  data: ExecutionUpdateManyDataInput;
}

export interface ExecutionUpdateManyDataInput {
  datetime?: Maybe<Int>;
}

export interface TaskUpsertWithoutNotificationsInput {
  update: TaskUpdateWithoutNotificationsDataInput;
  create: TaskCreateWithoutNotificationsInput;
}

export interface TaskNotificationUpsertWithWhereUniqueWithoutUserInput {
  where: TaskNotificationWhereUniqueInput;
  update: TaskNotificationUpdateWithoutUserDataInput;
  create: TaskNotificationCreateWithoutUserInput;
}

export interface TaskNotificationScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  AND?: Maybe<
    TaskNotificationScalarWhereInput[] | TaskNotificationScalarWhereInput
  >;
  OR?: Maybe<
    TaskNotificationScalarWhereInput[] | TaskNotificationScalarWhereInput
  >;
  NOT?: Maybe<
    TaskNotificationScalarWhereInput[] | TaskNotificationScalarWhereInput
  >;
}

export interface UserUpsertWithoutTasksInput {
  update: UserUpdateWithoutTasksDataInput;
  create: UserCreateWithoutTasksInput;
}

export interface TaskNotificationUpdateManyWithoutTaskInput {
  create?: Maybe<
    | TaskNotificationCreateWithoutTaskInput[]
    | TaskNotificationCreateWithoutTaskInput
  >;
  delete?: Maybe<
    TaskNotificationWhereUniqueInput[] | TaskNotificationWhereUniqueInput
  >;
  connect?: Maybe<
    TaskNotificationWhereUniqueInput[] | TaskNotificationWhereUniqueInput
  >;
  set?: Maybe<
    TaskNotificationWhereUniqueInput[] | TaskNotificationWhereUniqueInput
  >;
  disconnect?: Maybe<
    TaskNotificationWhereUniqueInput[] | TaskNotificationWhereUniqueInput
  >;
  update?: Maybe<
    | TaskNotificationUpdateWithWhereUniqueWithoutTaskInput[]
    | TaskNotificationUpdateWithWhereUniqueWithoutTaskInput
  >;
  upsert?: Maybe<
    | TaskNotificationUpsertWithWhereUniqueWithoutTaskInput[]
    | TaskNotificationUpsertWithWhereUniqueWithoutTaskInput
  >;
  deleteMany?: Maybe<
    TaskNotificationScalarWhereInput[] | TaskNotificationScalarWhereInput
  >;
}

export interface TaskNotificationUpdateWithWhereUniqueWithoutTaskInput {
  where: TaskNotificationWhereUniqueInput;
  data: TaskNotificationUpdateWithoutTaskDataInput;
}

export interface TaskNotificationUpdateWithoutTaskDataInput {
  user?: Maybe<UserUpdateOneWithoutNotificationsInput>;
}

export interface UserUpdateOneWithoutNotificationsInput {
  create?: Maybe<UserCreateWithoutNotificationsInput>;
  update?: Maybe<UserUpdateWithoutNotificationsDataInput>;
  upsert?: Maybe<UserUpsertWithoutNotificationsInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutNotificationsDataInput {
  isAdmin?: Maybe<Boolean>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  tasks?: Maybe<TaskUpdateManyWithoutAuthorInput>;
}

export interface TaskUpdateManyWithoutAuthorInput {
  create?: Maybe<TaskCreateWithoutAuthorInput[] | TaskCreateWithoutAuthorInput>;
  delete?: Maybe<TaskWhereUniqueInput[] | TaskWhereUniqueInput>;
  connect?: Maybe<TaskWhereUniqueInput[] | TaskWhereUniqueInput>;
  set?: Maybe<TaskWhereUniqueInput[] | TaskWhereUniqueInput>;
  disconnect?: Maybe<TaskWhereUniqueInput[] | TaskWhereUniqueInput>;
  update?: Maybe<
    | TaskUpdateWithWhereUniqueWithoutAuthorInput[]
    | TaskUpdateWithWhereUniqueWithoutAuthorInput
  >;
  upsert?: Maybe<
    | TaskUpsertWithWhereUniqueWithoutAuthorInput[]
    | TaskUpsertWithWhereUniqueWithoutAuthorInput
  >;
  deleteMany?: Maybe<TaskScalarWhereInput[] | TaskScalarWhereInput>;
  updateMany?: Maybe<
    TaskUpdateManyWithWhereNestedInput[] | TaskUpdateManyWithWhereNestedInput
  >;
}

export interface TaskUpdateWithWhereUniqueWithoutAuthorInput {
  where: TaskWhereUniqueInput;
  data: TaskUpdateWithoutAuthorDataInput;
}

export interface TaskUpdateWithoutAuthorDataInput {
  approved?: Maybe<Boolean>;
  number?: Maybe<Int>;
  command?: Maybe<String>;
  frequency?: Maybe<Int>;
  period?: Maybe<String>;
  executions?: Maybe<ExecutionUpdateManyWithoutTaskInput>;
  notifications?: Maybe<TaskNotificationUpdateManyWithoutTaskInput>;
}

export interface TaskUpsertWithWhereUniqueWithoutAuthorInput {
  where: TaskWhereUniqueInput;
  update: TaskUpdateWithoutAuthorDataInput;
  create: TaskCreateWithoutAuthorInput;
}

export interface TaskScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  approved?: Maybe<Boolean>;
  approved_not?: Maybe<Boolean>;
  number?: Maybe<Int>;
  number_not?: Maybe<Int>;
  number_in?: Maybe<Int[] | Int>;
  number_not_in?: Maybe<Int[] | Int>;
  number_lt?: Maybe<Int>;
  number_lte?: Maybe<Int>;
  number_gt?: Maybe<Int>;
  number_gte?: Maybe<Int>;
  command?: Maybe<String>;
  command_not?: Maybe<String>;
  command_in?: Maybe<String[] | String>;
  command_not_in?: Maybe<String[] | String>;
  command_lt?: Maybe<String>;
  command_lte?: Maybe<String>;
  command_gt?: Maybe<String>;
  command_gte?: Maybe<String>;
  command_contains?: Maybe<String>;
  command_not_contains?: Maybe<String>;
  command_starts_with?: Maybe<String>;
  command_not_starts_with?: Maybe<String>;
  command_ends_with?: Maybe<String>;
  command_not_ends_with?: Maybe<String>;
  frequency?: Maybe<Int>;
  frequency_not?: Maybe<Int>;
  frequency_in?: Maybe<Int[] | Int>;
  frequency_not_in?: Maybe<Int[] | Int>;
  frequency_lt?: Maybe<Int>;
  frequency_lte?: Maybe<Int>;
  frequency_gt?: Maybe<Int>;
  frequency_gte?: Maybe<Int>;
  period?: Maybe<String>;
  period_not?: Maybe<String>;
  period_in?: Maybe<String[] | String>;
  period_not_in?: Maybe<String[] | String>;
  period_lt?: Maybe<String>;
  period_lte?: Maybe<String>;
  period_gt?: Maybe<String>;
  period_gte?: Maybe<String>;
  period_contains?: Maybe<String>;
  period_not_contains?: Maybe<String>;
  period_starts_with?: Maybe<String>;
  period_not_starts_with?: Maybe<String>;
  period_ends_with?: Maybe<String>;
  period_not_ends_with?: Maybe<String>;
  AND?: Maybe<TaskScalarWhereInput[] | TaskScalarWhereInput>;
  OR?: Maybe<TaskScalarWhereInput[] | TaskScalarWhereInput>;
  NOT?: Maybe<TaskScalarWhereInput[] | TaskScalarWhereInput>;
}

export interface TaskUpdateManyWithWhereNestedInput {
  where: TaskScalarWhereInput;
  data: TaskUpdateManyDataInput;
}

export interface TaskUpdateManyDataInput {
  approved?: Maybe<Boolean>;
  number?: Maybe<Int>;
  command?: Maybe<String>;
  frequency?: Maybe<Int>;
  period?: Maybe<String>;
}

export interface UserUpsertWithoutNotificationsInput {
  update: UserUpdateWithoutNotificationsDataInput;
  create: UserCreateWithoutNotificationsInput;
}

export interface TaskNotificationUpsertWithWhereUniqueWithoutTaskInput {
  where: TaskNotificationWhereUniqueInput;
  update: TaskNotificationUpdateWithoutTaskDataInput;
  create: TaskNotificationCreateWithoutTaskInput;
}

export interface TaskUpsertWithoutExecutionsInput {
  update: TaskUpdateWithoutExecutionsDataInput;
  create: TaskCreateWithoutExecutionsInput;
}

export interface ExecutionUpdateManyMutationInput {
  datetime?: Maybe<Int>;
}

export interface TaskCreateInput {
  id?: Maybe<ID_Input>;
  author?: Maybe<UserCreateOneWithoutTasksInput>;
  approved?: Maybe<Boolean>;
  number: Int;
  command: String;
  frequency: Int;
  period: String;
  executions?: Maybe<ExecutionCreateManyWithoutTaskInput>;
  notifications?: Maybe<TaskNotificationCreateManyWithoutTaskInput>;
}

export interface TaskUpdateInput {
  author?: Maybe<UserUpdateOneWithoutTasksInput>;
  approved?: Maybe<Boolean>;
  number?: Maybe<Int>;
  command?: Maybe<String>;
  frequency?: Maybe<Int>;
  period?: Maybe<String>;
  executions?: Maybe<ExecutionUpdateManyWithoutTaskInput>;
  notifications?: Maybe<TaskNotificationUpdateManyWithoutTaskInput>;
}

export interface TaskUpdateManyMutationInput {
  approved?: Maybe<Boolean>;
  number?: Maybe<Int>;
  command?: Maybe<String>;
  frequency?: Maybe<Int>;
  period?: Maybe<String>;
}

export interface TaskNotificationCreateInput {
  id?: Maybe<ID_Input>;
  user?: Maybe<UserCreateOneWithoutNotificationsInput>;
  task?: Maybe<TaskCreateOneWithoutNotificationsInput>;
}

export interface TaskNotificationUpdateInput {
  user?: Maybe<UserUpdateOneWithoutNotificationsInput>;
  task?: Maybe<TaskUpdateOneWithoutNotificationsInput>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  isAdmin?: Maybe<Boolean>;
  email: String;
  password: String;
  tasks?: Maybe<TaskCreateManyWithoutAuthorInput>;
  notifications?: Maybe<TaskNotificationCreateManyWithoutUserInput>;
}

export interface UserUpdateInput {
  isAdmin?: Maybe<Boolean>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  tasks?: Maybe<TaskUpdateManyWithoutAuthorInput>;
  notifications?: Maybe<TaskNotificationUpdateManyWithoutUserInput>;
}

export interface UserUpdateManyMutationInput {
  isAdmin?: Maybe<Boolean>;
  email?: Maybe<String>;
  password?: Maybe<String>;
}

export interface ExecutionSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ExecutionWhereInput>;
  AND?: Maybe<
    ExecutionSubscriptionWhereInput[] | ExecutionSubscriptionWhereInput
  >;
  OR?: Maybe<
    ExecutionSubscriptionWhereInput[] | ExecutionSubscriptionWhereInput
  >;
  NOT?: Maybe<
    ExecutionSubscriptionWhereInput[] | ExecutionSubscriptionWhereInput
  >;
}

export interface TaskSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<TaskWhereInput>;
  AND?: Maybe<TaskSubscriptionWhereInput[] | TaskSubscriptionWhereInput>;
  OR?: Maybe<TaskSubscriptionWhereInput[] | TaskSubscriptionWhereInput>;
  NOT?: Maybe<TaskSubscriptionWhereInput[] | TaskSubscriptionWhereInput>;
}

export interface TaskNotificationSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<TaskNotificationWhereInput>;
  AND?: Maybe<
    | TaskNotificationSubscriptionWhereInput[]
    | TaskNotificationSubscriptionWhereInput
  >;
  OR?: Maybe<
    | TaskNotificationSubscriptionWhereInput[]
    | TaskNotificationSubscriptionWhereInput
  >;
  NOT?: Maybe<
    | TaskNotificationSubscriptionWhereInput[]
    | TaskNotificationSubscriptionWhereInput
  >;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Execution {
  id: ID_Output;
  datetime: Int;
}

export interface ExecutionPromise extends Promise<Execution>, Fragmentable {
  id: () => Promise<ID_Output>;
  task: <T = TaskPromise>() => T;
  datetime: () => Promise<Int>;
}

export interface ExecutionSubscription
  extends Promise<AsyncIterator<Execution>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  task: <T = TaskSubscription>() => T;
  datetime: () => Promise<AsyncIterator<Int>>;
}

export interface ExecutionNullablePromise
  extends Promise<Execution | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  task: <T = TaskPromise>() => T;
  datetime: () => Promise<Int>;
}

export interface Task {
  id: ID_Output;
  approved?: Boolean;
  number: Int;
  command: String;
  frequency: Int;
  period: String;
}

export interface TaskPromise extends Promise<Task>, Fragmentable {
  id: () => Promise<ID_Output>;
  author: <T = UserPromise>() => T;
  approved: () => Promise<Boolean>;
  number: () => Promise<Int>;
  command: () => Promise<String>;
  frequency: () => Promise<Int>;
  period: () => Promise<String>;
  executions: <T = FragmentableArray<Execution>>(args?: {
    where?: ExecutionWhereInput;
    orderBy?: ExecutionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  notifications: <T = FragmentableArray<TaskNotification>>(args?: {
    where?: TaskNotificationWhereInput;
    orderBy?: TaskNotificationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface TaskSubscription
  extends Promise<AsyncIterator<Task>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  author: <T = UserSubscription>() => T;
  approved: () => Promise<AsyncIterator<Boolean>>;
  number: () => Promise<AsyncIterator<Int>>;
  command: () => Promise<AsyncIterator<String>>;
  frequency: () => Promise<AsyncIterator<Int>>;
  period: () => Promise<AsyncIterator<String>>;
  executions: <T = Promise<AsyncIterator<ExecutionSubscription>>>(args?: {
    where?: ExecutionWhereInput;
    orderBy?: ExecutionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  notifications: <
    T = Promise<AsyncIterator<TaskNotificationSubscription>>
  >(args?: {
    where?: TaskNotificationWhereInput;
    orderBy?: TaskNotificationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface TaskNullablePromise
  extends Promise<Task | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  author: <T = UserPromise>() => T;
  approved: () => Promise<Boolean>;
  number: () => Promise<Int>;
  command: () => Promise<String>;
  frequency: () => Promise<Int>;
  period: () => Promise<String>;
  executions: <T = FragmentableArray<Execution>>(args?: {
    where?: ExecutionWhereInput;
    orderBy?: ExecutionOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  notifications: <T = FragmentableArray<TaskNotification>>(args?: {
    where?: TaskNotificationWhereInput;
    orderBy?: TaskNotificationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface User {
  id: ID_Output;
  isAdmin: Boolean;
  email: String;
  password: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  isAdmin: () => Promise<Boolean>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  tasks: <T = FragmentableArray<Task>>(args?: {
    where?: TaskWhereInput;
    orderBy?: TaskOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  notifications: <T = FragmentableArray<TaskNotification>>(args?: {
    where?: TaskNotificationWhereInput;
    orderBy?: TaskNotificationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  isAdmin: () => Promise<AsyncIterator<Boolean>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  tasks: <T = Promise<AsyncIterator<TaskSubscription>>>(args?: {
    where?: TaskWhereInput;
    orderBy?: TaskOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  notifications: <
    T = Promise<AsyncIterator<TaskNotificationSubscription>>
  >(args?: {
    where?: TaskNotificationWhereInput;
    orderBy?: TaskNotificationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  isAdmin: () => Promise<Boolean>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  tasks: <T = FragmentableArray<Task>>(args?: {
    where?: TaskWhereInput;
    orderBy?: TaskOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  notifications: <T = FragmentableArray<TaskNotification>>(args?: {
    where?: TaskNotificationWhereInput;
    orderBy?: TaskNotificationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface TaskNotification {
  id: ID_Output;
}

export interface TaskNotificationPromise
  extends Promise<TaskNotification>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  task: <T = TaskPromise>() => T;
}

export interface TaskNotificationSubscription
  extends Promise<AsyncIterator<TaskNotification>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  user: <T = UserSubscription>() => T;
  task: <T = TaskSubscription>() => T;
}

export interface TaskNotificationNullablePromise
  extends Promise<TaskNotification | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  user: <T = UserPromise>() => T;
  task: <T = TaskPromise>() => T;
}

export interface ExecutionConnection {
  pageInfo: PageInfo;
  edges: ExecutionEdge[];
}

export interface ExecutionConnectionPromise
  extends Promise<ExecutionConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ExecutionEdge>>() => T;
  aggregate: <T = AggregateExecutionPromise>() => T;
}

export interface ExecutionConnectionSubscription
  extends Promise<AsyncIterator<ExecutionConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ExecutionEdgeSubscription>>>() => T;
  aggregate: <T = AggregateExecutionSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface ExecutionEdge {
  node: Execution;
  cursor: String;
}

export interface ExecutionEdgePromise
  extends Promise<ExecutionEdge>,
    Fragmentable {
  node: <T = ExecutionPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ExecutionEdgeSubscription
  extends Promise<AsyncIterator<ExecutionEdge>>,
    Fragmentable {
  node: <T = ExecutionSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateExecution {
  count: Int;
}

export interface AggregateExecutionPromise
  extends Promise<AggregateExecution>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateExecutionSubscription
  extends Promise<AsyncIterator<AggregateExecution>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface TaskConnection {
  pageInfo: PageInfo;
  edges: TaskEdge[];
}

export interface TaskConnectionPromise
  extends Promise<TaskConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<TaskEdge>>() => T;
  aggregate: <T = AggregateTaskPromise>() => T;
}

export interface TaskConnectionSubscription
  extends Promise<AsyncIterator<TaskConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<TaskEdgeSubscription>>>() => T;
  aggregate: <T = AggregateTaskSubscription>() => T;
}

export interface TaskEdge {
  node: Task;
  cursor: String;
}

export interface TaskEdgePromise extends Promise<TaskEdge>, Fragmentable {
  node: <T = TaskPromise>() => T;
  cursor: () => Promise<String>;
}

export interface TaskEdgeSubscription
  extends Promise<AsyncIterator<TaskEdge>>,
    Fragmentable {
  node: <T = TaskSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateTask {
  count: Int;
}

export interface AggregateTaskPromise
  extends Promise<AggregateTask>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateTaskSubscription
  extends Promise<AsyncIterator<AggregateTask>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface TaskNotificationConnection {
  pageInfo: PageInfo;
  edges: TaskNotificationEdge[];
}

export interface TaskNotificationConnectionPromise
  extends Promise<TaskNotificationConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<TaskNotificationEdge>>() => T;
  aggregate: <T = AggregateTaskNotificationPromise>() => T;
}

export interface TaskNotificationConnectionSubscription
  extends Promise<AsyncIterator<TaskNotificationConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<TaskNotificationEdgeSubscription>>>() => T;
  aggregate: <T = AggregateTaskNotificationSubscription>() => T;
}

export interface TaskNotificationEdge {
  node: TaskNotification;
  cursor: String;
}

export interface TaskNotificationEdgePromise
  extends Promise<TaskNotificationEdge>,
    Fragmentable {
  node: <T = TaskNotificationPromise>() => T;
  cursor: () => Promise<String>;
}

export interface TaskNotificationEdgeSubscription
  extends Promise<AsyncIterator<TaskNotificationEdge>>,
    Fragmentable {
  node: <T = TaskNotificationSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateTaskNotification {
  count: Int;
}

export interface AggregateTaskNotificationPromise
  extends Promise<AggregateTaskNotification>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateTaskNotificationSubscription
  extends Promise<AsyncIterator<AggregateTaskNotification>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface ExecutionSubscriptionPayload {
  mutation: MutationType;
  node: Execution;
  updatedFields: String[];
  previousValues: ExecutionPreviousValues;
}

export interface ExecutionSubscriptionPayloadPromise
  extends Promise<ExecutionSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ExecutionPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ExecutionPreviousValuesPromise>() => T;
}

export interface ExecutionSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ExecutionSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ExecutionSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ExecutionPreviousValuesSubscription>() => T;
}

export interface ExecutionPreviousValues {
  id: ID_Output;
  datetime: Int;
}

export interface ExecutionPreviousValuesPromise
  extends Promise<ExecutionPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  datetime: () => Promise<Int>;
}

export interface ExecutionPreviousValuesSubscription
  extends Promise<AsyncIterator<ExecutionPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  datetime: () => Promise<AsyncIterator<Int>>;
}

export interface TaskSubscriptionPayload {
  mutation: MutationType;
  node: Task;
  updatedFields: String[];
  previousValues: TaskPreviousValues;
}

export interface TaskSubscriptionPayloadPromise
  extends Promise<TaskSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = TaskPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = TaskPreviousValuesPromise>() => T;
}

export interface TaskSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<TaskSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = TaskSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = TaskPreviousValuesSubscription>() => T;
}

export interface TaskPreviousValues {
  id: ID_Output;
  approved?: Boolean;
  number: Int;
  command: String;
  frequency: Int;
  period: String;
}

export interface TaskPreviousValuesPromise
  extends Promise<TaskPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  approved: () => Promise<Boolean>;
  number: () => Promise<Int>;
  command: () => Promise<String>;
  frequency: () => Promise<Int>;
  period: () => Promise<String>;
}

export interface TaskPreviousValuesSubscription
  extends Promise<AsyncIterator<TaskPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  approved: () => Promise<AsyncIterator<Boolean>>;
  number: () => Promise<AsyncIterator<Int>>;
  command: () => Promise<AsyncIterator<String>>;
  frequency: () => Promise<AsyncIterator<Int>>;
  period: () => Promise<AsyncIterator<String>>;
}

export interface TaskNotificationSubscriptionPayload {
  mutation: MutationType;
  node: TaskNotification;
  updatedFields: String[];
  previousValues: TaskNotificationPreviousValues;
}

export interface TaskNotificationSubscriptionPayloadPromise
  extends Promise<TaskNotificationSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = TaskNotificationPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = TaskNotificationPreviousValuesPromise>() => T;
}

export interface TaskNotificationSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<TaskNotificationSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = TaskNotificationSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = TaskNotificationPreviousValuesSubscription>() => T;
}

export interface TaskNotificationPreviousValues {
  id: ID_Output;
}

export interface TaskNotificationPreviousValuesPromise
  extends Promise<TaskNotificationPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
}

export interface TaskNotificationPreviousValuesSubscription
  extends Promise<AsyncIterator<TaskNotificationPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  isAdmin: Boolean;
  email: String;
  password: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  isAdmin: () => Promise<Boolean>;
  email: () => Promise<String>;
  password: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  isAdmin: () => Promise<AsyncIterator<Boolean>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Task",
    embedded: false
  },
  {
    name: "Execution",
    embedded: false
  },
  {
    name: "TaskNotification",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
