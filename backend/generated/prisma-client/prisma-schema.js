module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateExecution {
  count: Int!
}

type AggregateTask {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Execution {
  id: ID!
  task: Task
  datetime: Int!
}

type ExecutionConnection {
  pageInfo: PageInfo!
  edges: [ExecutionEdge]!
  aggregate: AggregateExecution!
}

input ExecutionCreateInput {
  id: ID
  task: TaskCreateOneWithoutExecutionsInput
  datetime: Int!
}

input ExecutionCreateManyWithoutTaskInput {
  create: [ExecutionCreateWithoutTaskInput!]
  connect: [ExecutionWhereUniqueInput!]
}

input ExecutionCreateWithoutTaskInput {
  id: ID
  datetime: Int!
}

type ExecutionEdge {
  node: Execution!
  cursor: String!
}

enum ExecutionOrderByInput {
  id_ASC
  id_DESC
  datetime_ASC
  datetime_DESC
}

type ExecutionPreviousValues {
  id: ID!
  datetime: Int!
}

input ExecutionScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  datetime: Int
  datetime_not: Int
  datetime_in: [Int!]
  datetime_not_in: [Int!]
  datetime_lt: Int
  datetime_lte: Int
  datetime_gt: Int
  datetime_gte: Int
  AND: [ExecutionScalarWhereInput!]
  OR: [ExecutionScalarWhereInput!]
  NOT: [ExecutionScalarWhereInput!]
}

type ExecutionSubscriptionPayload {
  mutation: MutationType!
  node: Execution
  updatedFields: [String!]
  previousValues: ExecutionPreviousValues
}

input ExecutionSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ExecutionWhereInput
  AND: [ExecutionSubscriptionWhereInput!]
  OR: [ExecutionSubscriptionWhereInput!]
  NOT: [ExecutionSubscriptionWhereInput!]
}

input ExecutionUpdateInput {
  task: TaskUpdateOneWithoutExecutionsInput
  datetime: Int
}

input ExecutionUpdateManyDataInput {
  datetime: Int
}

input ExecutionUpdateManyMutationInput {
  datetime: Int
}

input ExecutionUpdateManyWithoutTaskInput {
  create: [ExecutionCreateWithoutTaskInput!]
  delete: [ExecutionWhereUniqueInput!]
  connect: [ExecutionWhereUniqueInput!]
  set: [ExecutionWhereUniqueInput!]
  disconnect: [ExecutionWhereUniqueInput!]
  update: [ExecutionUpdateWithWhereUniqueWithoutTaskInput!]
  upsert: [ExecutionUpsertWithWhereUniqueWithoutTaskInput!]
  deleteMany: [ExecutionScalarWhereInput!]
  updateMany: [ExecutionUpdateManyWithWhereNestedInput!]
}

input ExecutionUpdateManyWithWhereNestedInput {
  where: ExecutionScalarWhereInput!
  data: ExecutionUpdateManyDataInput!
}

input ExecutionUpdateWithoutTaskDataInput {
  datetime: Int
}

input ExecutionUpdateWithWhereUniqueWithoutTaskInput {
  where: ExecutionWhereUniqueInput!
  data: ExecutionUpdateWithoutTaskDataInput!
}

input ExecutionUpsertWithWhereUniqueWithoutTaskInput {
  where: ExecutionWhereUniqueInput!
  update: ExecutionUpdateWithoutTaskDataInput!
  create: ExecutionCreateWithoutTaskInput!
}

input ExecutionWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  task: TaskWhereInput
  datetime: Int
  datetime_not: Int
  datetime_in: [Int!]
  datetime_not_in: [Int!]
  datetime_lt: Int
  datetime_lte: Int
  datetime_gt: Int
  datetime_gte: Int
  AND: [ExecutionWhereInput!]
  OR: [ExecutionWhereInput!]
  NOT: [ExecutionWhereInput!]
}

input ExecutionWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createExecution(data: ExecutionCreateInput!): Execution!
  updateExecution(data: ExecutionUpdateInput!, where: ExecutionWhereUniqueInput!): Execution
  updateManyExecutions(data: ExecutionUpdateManyMutationInput!, where: ExecutionWhereInput): BatchPayload!
  upsertExecution(where: ExecutionWhereUniqueInput!, create: ExecutionCreateInput!, update: ExecutionUpdateInput!): Execution!
  deleteExecution(where: ExecutionWhereUniqueInput!): Execution
  deleteManyExecutions(where: ExecutionWhereInput): BatchPayload!
  createTask(data: TaskCreateInput!): Task!
  updateTask(data: TaskUpdateInput!, where: TaskWhereUniqueInput!): Task
  updateManyTasks(data: TaskUpdateManyMutationInput!, where: TaskWhereInput): BatchPayload!
  upsertTask(where: TaskWhereUniqueInput!, create: TaskCreateInput!, update: TaskUpdateInput!): Task!
  deleteTask(where: TaskWhereUniqueInput!): Task
  deleteManyTasks(where: TaskWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  execution(where: ExecutionWhereUniqueInput!): Execution
  executions(where: ExecutionWhereInput, orderBy: ExecutionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Execution]!
  executionsConnection(where: ExecutionWhereInput, orderBy: ExecutionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ExecutionConnection!
  task(where: TaskWhereUniqueInput!): Task
  tasks(where: TaskWhereInput, orderBy: TaskOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Task]!
  tasksConnection(where: TaskWhereInput, orderBy: TaskOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TaskConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Subscription {
  execution(where: ExecutionSubscriptionWhereInput): ExecutionSubscriptionPayload
  task(where: TaskSubscriptionWhereInput): TaskSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type Task {
  id: ID!
  number: Int!
  command: String!
  frequency: Int!
  period: String!
  executions(where: ExecutionWhereInput, orderBy: ExecutionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Execution!]
}

type TaskConnection {
  pageInfo: PageInfo!
  edges: [TaskEdge]!
  aggregate: AggregateTask!
}

input TaskCreateInput {
  id: ID
  number: Int!
  command: String!
  frequency: Int!
  period: String!
  executions: ExecutionCreateManyWithoutTaskInput
}

input TaskCreateOneWithoutExecutionsInput {
  create: TaskCreateWithoutExecutionsInput
  connect: TaskWhereUniqueInput
}

input TaskCreateWithoutExecutionsInput {
  id: ID
  number: Int!
  command: String!
  frequency: Int!
  period: String!
}

type TaskEdge {
  node: Task!
  cursor: String!
}

enum TaskOrderByInput {
  id_ASC
  id_DESC
  number_ASC
  number_DESC
  command_ASC
  command_DESC
  frequency_ASC
  frequency_DESC
  period_ASC
  period_DESC
}

type TaskPreviousValues {
  id: ID!
  number: Int!
  command: String!
  frequency: Int!
  period: String!
}

type TaskSubscriptionPayload {
  mutation: MutationType!
  node: Task
  updatedFields: [String!]
  previousValues: TaskPreviousValues
}

input TaskSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: TaskWhereInput
  AND: [TaskSubscriptionWhereInput!]
  OR: [TaskSubscriptionWhereInput!]
  NOT: [TaskSubscriptionWhereInput!]
}

input TaskUpdateInput {
  number: Int
  command: String
  frequency: Int
  period: String
  executions: ExecutionUpdateManyWithoutTaskInput
}

input TaskUpdateManyMutationInput {
  number: Int
  command: String
  frequency: Int
  period: String
}

input TaskUpdateOneWithoutExecutionsInput {
  create: TaskCreateWithoutExecutionsInput
  update: TaskUpdateWithoutExecutionsDataInput
  upsert: TaskUpsertWithoutExecutionsInput
  delete: Boolean
  disconnect: Boolean
  connect: TaskWhereUniqueInput
}

input TaskUpdateWithoutExecutionsDataInput {
  number: Int
  command: String
  frequency: Int
  period: String
}

input TaskUpsertWithoutExecutionsInput {
  update: TaskUpdateWithoutExecutionsDataInput!
  create: TaskCreateWithoutExecutionsInput!
}

input TaskWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  number: Int
  number_not: Int
  number_in: [Int!]
  number_not_in: [Int!]
  number_lt: Int
  number_lte: Int
  number_gt: Int
  number_gte: Int
  command: String
  command_not: String
  command_in: [String!]
  command_not_in: [String!]
  command_lt: String
  command_lte: String
  command_gt: String
  command_gte: String
  command_contains: String
  command_not_contains: String
  command_starts_with: String
  command_not_starts_with: String
  command_ends_with: String
  command_not_ends_with: String
  frequency: Int
  frequency_not: Int
  frequency_in: [Int!]
  frequency_not_in: [Int!]
  frequency_lt: Int
  frequency_lte: Int
  frequency_gt: Int
  frequency_gte: Int
  period: String
  period_not: String
  period_in: [String!]
  period_not_in: [String!]
  period_lt: String
  period_lte: String
  period_gt: String
  period_gte: String
  period_contains: String
  period_not_contains: String
  period_starts_with: String
  period_not_starts_with: String
  period_ends_with: String
  period_not_ends_with: String
  executions_every: ExecutionWhereInput
  executions_some: ExecutionWhereInput
  executions_none: ExecutionWhereInput
  AND: [TaskWhereInput!]
  OR: [TaskWhereInput!]
  NOT: [TaskWhereInput!]
}

input TaskWhereUniqueInput {
  id: ID
  number: Int
}

type User {
  id: ID!
  isAdmin: Boolean!
  email: String!
  password: String!
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  isAdmin: Boolean
  email: String!
  password: String!
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  isAdmin_ASC
  isAdmin_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
}

type UserPreviousValues {
  id: ID!
  isAdmin: Boolean!
  email: String!
  password: String!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  isAdmin: Boolean
  email: String
  password: String
}

input UserUpdateManyMutationInput {
  isAdmin: Boolean
  email: String
  password: String
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  isAdmin: Boolean
  isAdmin_not: Boolean
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
`
      }
    